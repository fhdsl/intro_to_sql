---
title: "Week 2 Exercises"
---

In the exercises, you'll work with a different database. It is a synthetic dataset of breast cancer patients, but it has the same table structure (or schema) as the in-class example. It is much larger than the in class example.

We'll first connect to the database:

```{r}
#| context: setup
library(duckdb)
library(DBI)
con <- DBI::dbConnect(duckdb::duckdb(), 
                      "data/synthea-smaller_breast_cancer.db")
                      
```

## Aliases and Table References

Use table references and aliases to make this query unambiguous:

```{sql}
#| connection: "con"
SELECT person_id, gender_source_value, birth_datetime
  FROM person AS ------
  WHERE gender_source_value = 'M'
```

Rename the columns of the query to be `id`, `sex`, and `birthdate`:

```{sql}
#| connection: "con"
SELECT person_id, gender_source_value, birth_datetime
  FROM person AS ------
  WHERE gender_source_value = 'M'
```

## `JOIN`s

`INNER JOIN` `person` and `concept` on `gender_concept_id` and `concept_id`, respectively. `SELECT` `person_id` and `concept_name` from the appropriate tables.

We update our entity-relationship diagram as follows to show the link between `gender_concept_id` in `person` and `concept_id` in `concept`:

![](img/omop2.png)

This shows that rows of the `concept` table contains `concept_id`s for information about `gender_concept_id` from `person` *and* `procedure_concept_id` from `procedure_occurrence`! The `concept` table is like a lookup table of anything that has a `concept_id`.

```{sql}
#| connection: "con"
SELECT *
  FROM ------
  INNER JOIN -----
  ON ----- = ------
  LIMIT 20;
```

`INNER JOIN` 3 tables: `person`, `procedure_occurrence`, and `concept`, `ON` the appropriate keys. (See class notes for similar examples.) Select `person_id`, `birth_datetime`, `concept_name`, and `procedure_date` from the appropriate tables. Use table references and aliases to make the column names unambiguous.

```{sql}
#| connection: "con"
SELECT -----, ------, -----, -----
  FROM ------
  INNER JOIN ------
  ON ------ = -------
  INNER JOIN ------
  ON ------ - -------

```

Modify the above query to select only those procedures done after the year 2000 in the code chunk below.

You can extract the Year part from a date column with `date_part('YEAR', ------)`

```{sql}
#| connection: "con"
SELECT -----, ------, -----, -----
  FROM ------
  INNER JOIN ------
  ON ------ = -------
  INNER JOIN ------
  ON ------ - -------
  WHERE ----- - -------
```

## Boolean Logic

Count the number of cases for `procedure_occurrence` with the following criteria:

```         
procedure_concept_id = 4230911 
  AND date_part('YEAR', procedure_datetime) > 2000
```

```{sql}
#| connection: "con"
SELECT COUNT(*) 
  FROM procedure_occurrence
  ----------
  ----------
```

Try it out with `OR` instead. Was your result bigger or smaller than the `AND`?

```{sql}
#| connection: "con"
SELECT COUNT(*) 
  FROM procedure_occurrence
  ----------
  ----------  
```

## On Your Own

Try constructing a query of your own that uses a `JOIN`. If you want to go further, add a `WHERE` as well. Consider other tables in the database!

```{sql}
#| connection: "con"

```
