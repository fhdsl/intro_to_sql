---
title: "Miscellaneous Grabbag"
format: html
---

```{r}
#| context: setup
#| echo: false
library(duckdb)
library(DBI)

con <- DBI::dbConnect(duckdb::duckdb(), 
                      "data/GiBleed_5.3_1.1.duckdb")
```

This section is for small articles or to answer questions in class.

## How to Store Passwords

A warning: do not store passwords in your code. It is a major security risk.

The key to avoiding this is to store the password where your machine can access it, but is not part of your code base. (If you are more advanced, you can store the password in your project directory, but make sure it is in your `.gitignore`).

There are multiple ways to store passwords securely:

- Store them as an Environment Variable on your machine
- Use a global `.Renviron` file to store it outside of your code: https://rstats.wtf/r-startup.html#renviron
- Store them in a secure password manager / keyring (see below).

### What are environment variables?

These are variables that can be seen by all applications, including R/RStudio. They are not stored within code, but as variables in memory. One of the ones you might have had to struggle wiht is `JAVA_HOME`, whih is where you set a Java installation.

We can set environment variables directly, or we can specify them in a file called `.Renviron` that lives in our home directory. 

We will use them as a more secure way to store our passwords. We choose the `user` scope so that it is saved in our home directory, not the project directory. This way, we can protect our password from prying eyes and bots.

```{r}
usethis::edit_r_environ(scope="user")
```

Add the following to your `.Renviron` file:

```
CLASS_DB_PASSWORD="IntroSQL"
```

You may have to reopen the project for it to be loaded in your environment variables. We can now load the password using `Sys.getenv()`.

```{r}
Sys.getenv("CLASS_DB_PASSWORD")
```

You can also set the environment variable using Windows Control Panel or PowerShell: https://phoenixnap.com/kb/windows-set-environment-variable - the easiest way to do it is probably the control panel method.

There will probably be some sort of authentication process involved in connecting to your databases at Fred Hutch. I'll add more info when I know more.

There is much more about storing passwords and other secrets such as API keys here: <https://cran.r-project.org/web/packages/httr/vignettes/secrets.html>.

## Databases versus Data Warehouses

```{mermaid}
graph TD
  A[(Database)] --ETL--> D
  B[(Database)] --ETL--> D
  C[(Database)] --ETL--> D
  D[(Data Warehouse)] 

```
- **Databases**: made for data collection, or *transactional processing* - these systems are made to be updated by multiple sources at once. For example, a collection form that feeds into a database can be submitted by multiple people at once. If you need the latest records, you want to pull from the database.
- **Data Warehouse**: Aggregated data from many databases, made for data analysis, or *analytical processing*. They are usually updated on a nightly basis, taking summary data from each database. 

We will be mostly doing analytical querying, as if our data is stored in a data warehouse.

## What's the deal with the `;` (semicolon)?

We use the `;` to specify the end of a SQL statement. It is mostly important if you write SQL statements in multiple parts, which we will not do in class.


## Keep in Mind: Beware the Smart Quotes

**Beware cutting and pasting code from Microsoft Word**

Microsoft products such as Word, will transform double quotes `"` into what are called *smart quotes*: `“”`. This is bad for us, because it breaks our code.

```
"This is the Original String"
```

will transform into:

```
“This is the Original String”
```

It is very hard to see the difference between these, but if you cut and paste the bottom one (from a word document), your code will not run. That's because the smart quotes aren't double quotes, which you need to specify a string.

Just be aware that you might have to fix these quotes if you're cutting / pasting from a Microsoft product (although google is also guilty of this).

Oftentimes, you can disable this in Word/Google Docs, or be prepared to replace the smart quotes with double quotes.
:::


## Dumping a Query Straight into memory

```{r}
library(duckdb)
con <- DBI::dbConnect(duckdb::duckdb(), 
                      "data/GiBleed_5.3_1.1.duckdb")
```

We can add a line to our SQL code cell to save the output of our SQL query 

```{{sql}}
#| connection: "con"
#| output.var: person
SELECT * FROM person
  LIMIT 10;
```

If we run this, we will save the output into the object called `person`:

```{sql}
#| connection: "con"
#| output.var: person
SELECT * FROM person
  LIMIT 10;
```

We can work with this as a normal R object now: 

```{r}
person
```


## Query Plans

All database systems will translate your SQL query into a concrete *query plan*: this shows step by step, how the engine will execute your query. With DuckDB, we can use `EXPLAIN`.

Note that the output of `EXPLAIN` is not a table, which is why I'm using an R chunk to execute the SQL.

```{r}

statement <-   "EXPLAIN SELECT po.person_id, c.concept_name, po.procedure_date
    FROM procedure_occurrence as po 
    INNER JOIN concept as c
    ON po.procedure_concept_id = c.concept_id
    ORDER BY po.procedure_date;"

dbGetQuery(con, statement)
```
Using `EXPLAIN ANALYZE` will not only show the query plan, but also how long it takes to execute each step. 

```{r}

statement <-   "EXPLAIN ANALYZE SELECT po.person_id, c.concept_name, po.procedure_date
    FROM procedure_occurrence as po 
    INNER JOIN concept as c
    ON po.procedure_concept_id = c.concept_id
    ORDER BY po.procedure_date;"

dbGetQuery(con, statement)
```

## Apache Iceberg

One transactional database format that is starting to be very important is *Apache Iceberg*. 


## How do we speed things up?

Our main tool for speeding up database searches is **Indexing**. Creating an index on a column speeds up searching through that particular column. 

Database Tuning is as much an art as it is a science. Too many indexes will make the database too big, whereas too few indexes will result in slow performance. This is why we hire database admins. Their work is incredibly important to keeping our data integrity and performing.  

```{r}
dbDisconnect(con)
```

